name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - master  # Trigger the pipeline on push to master branch
    paths:
      - 'Dockerfile'
      - 'server.js'
      - 'package.json'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (optional but recommended for multi-platform support)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Set up AWS CLI (configure AWS credentials)
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 4: Log in to Amazon ECR using AWS CLI
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    # Step 5: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t my-node-app .
        docker tag my-node-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

    # Step 6: Push Docker image to Amazon ECR
    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest

    # Step 7: Clean up Docker images (optional)
    - name: Clean up Docker images
      run: |
        docker rmi ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPO_NAME }}:latest
        docker rmi my-node-app:latest
